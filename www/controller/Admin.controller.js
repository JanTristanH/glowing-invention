sap.ui.define(["hwb/frontendhwb/controller/MapInner.controller","sap/ui/core/Fragment","sap/m/MessageToast","sap/ui/vbm/Spot","sap/m/MessageBox","sap/ui/model/Filter","sap/ui/model/FilterOperator","sap/ui/model/json/JSONModel","sap/ui/comp/smartmultiedit/Container"],function(t,e,s,i,o,n,r,u){"use strict";return t.extend("hwb.frontendhwb.controller.Admin",{sCurrentSpotId:"",onInit:function(){t.prototype.onInit.apply(this,arguments);this.getView().setModel(new u,"local")},onAfterRendering:function(){let t=this.getView().byId("idRoutePlanenAdminButton");t?t.setType("Emphasized"):null;this.getView().getModel().setSizeLimit(1e3)},onFormatTypeByName:function(t){if(this.isStampBoxByName(t)){return"Success"}return"Default"},isStampBoxByName:function(t){return t.includes("Stempelstelle")},onNumberSpotClick:function(t){this.sCurrentSpotId=t.getSource().data("id");const s=this.getView();if(!this._pSpotDialog){this._pSpotDialog=e.load({id:s.getId(),name:"hwb.frontendhwb.fragment.admin.SpotDialog",controller:this}).then(function(t){s.addDependent(t);return t})}this._pSpotDialog.then(t=>{this.byId("idCurrentIdLabel").setText("Id: "+this.sCurrentSpotId);let e=this.getModel().getProperty(`/AllPointsOfInterest(guid'${this.sCurrentSpotId}')/name`);this.byId("idNameInput").setValue(e?e:"Parkplatz");let s=this.getModel().getProperty(`/AllPointsOfInterest(guid'${this.sCurrentSpotId}')/description`);this.byId("idDescriptionInput").setValue(s?s:"Parkplatz");t.open(t)})},onCloselButtonSpotActionPress:function(){this._pSpotDialog.then(t=>t.close())},onShowRoutesButtonPress:function(){this.onSpotContextMenu(null,this.sCurrentSpotId)},onSpotContextMenu:function(t,e){const s=e?e:t.getSource().data("id");this.getModel().read("/TravelTimes",{filters:[new n({path:"fromPoi",operator:r.EQ,value1:s})],success:function(t){let e=this.getView().getModel("local");e.setProperty("/oSelectedTour/path",t.results)}.bind(this)})},onGeoMapContextMenu:function(t){let e=sap.ui.getCore().byId("idTemporarySpot");if(!e){e=new i({id:"idTemporarySpot",click:this.onNumberSpotClick.bind(this),labelText:"temporärer Spot"});this.getView().byId("idAllPointsOfInterestsSpotsAdmin").addItem(e)}e.setPosition(t.getParameter("pos"))},onDeleteButtonPress:function(){if(!this.sCurrentSpotId){sap.ui.getCore().byId("idTemporarySpot").setPosition("0;0;0");this.onCloselButtonSpotActionPress();return}let t=this.getView().getModel();this.getView().setBusy(true);t.callFunction("/DeleteSpotWithRoutes",{method:"POST",urlParameters:{SpotId:this.sCurrentSpotId},success:this.showMessage("Spot sammt Routen gelöscht: "),error:this.showError.bind(this)})},showMessage:function(t){return function(e){let i=e.DeleteSpotWithRoutes?e.DeleteSpotWithRoutes:"";s.show(t+i);this.getView().setBusy(false);this.getModel().refresh();this.onCloselButtonSpotActionPress()}.bind(this)},showError:function(t){this.getView().setBusy(false);s.show(JSON.stringify(t))},onSaveButtonSpotActionPress:function(){if(!this.sCurrentSpotId){this.saveTemporarySpot()}else{this.updateExisting()}},saveTemporarySpot:function(){const t=sap.ui.getCore().byId("idTemporarySpot").getPosition().split(";");const e={longitude:t[0],latitude:t[1],name:this.byId("idNameInput").getValue(),description:this.byId("idDescriptionInput").getValue()};this.getModel().create("/ParkingSpots",e,{success:this.showMessage("Parkplatz angelgt!"),error:this.showError.bind(this)})},updateExisting:function(){const t=this.getModel().getProperty(`/AllPointsOfInterest(guid'${this.sCurrentSpotId}')`);let e=this.isStampBoxByName(t.name)?"/Stampboxes":"/ParkingSpots";e+=`(guid'${this.sCurrentSpotId}')`;const s={name:this.byId("idNameInput").getValue(),description:this.byId("idDescriptionInput").getValue()};this.getModel().update(e,s,{success:this.showMessage("Spot geupdated!"),error:this.showError.bind(this)})},onFormatPoiName:function(t){if(t.includes("Stempelstelle")){return t.split(" ")[1]}return"P"},onOpenExternalButtonPress:function(){let t=this.getModel().getProperty(`/AllPointsOfInterest(guid'${this.sCurrentSpotId}')/name`);const e=`https://www.harzer-wandernadel.de/?s=${t}`;window.open(e,"_blank").focus()},onCheckAllRoutesButtonPress:function(){const t=5;let e=this.getView().getModel();this.getView().setBusy(true);e.callFunction("/getMissingTravelTimesCount",{urlParameters:{n:t},success:function(i){this.getView().setBusy(false);o.confirm(`Es wurden ${i.getMissingTravelTimesCount} fehlende Routen festgestellt.\n Erneut prüfen ${i.getMissingTravelTimesCount} fehlende Routen hinzufügen? Es können Kosten anfallen.`,{onClose:function(i){if(i=="OK"){this.getView().setBusy(true);e.callFunction("/calculateTravelTimesNNearestNeighbors",{urlParameters:{n:t},success:function(t){this.getView().setBusy(false);s.show(`Es wurden ${t.calculateTravelTimesNNearestNeighbors} Routen ergänzt.`)}.bind(this),error:this.showError.bind(this)})}}.bind(this)})}.bind(this),error:this.showError.bind(this)})}})});
//# sourceMappingURL=Admin.controller.js.map